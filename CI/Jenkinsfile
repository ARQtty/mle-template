pipeline {
    agent any

    environment {
        DOCKERHUB_CREDS=credentials('mle-template')
    }

options {
        timestamps()
        skipDefaultCheckout(true)
	}
    stages {
        stage('Clone github repository') {
            steps {
                cleanWs()
                bat 'git clone -b main https://github.com/IcyAltair/mle-template.git'
				}
			}
        stage('Checkout repo dir') {
            steps {
                bat 'cd mle-template && dir'
				}
			}
        stage('Create and run docker container') {
            steps {
                script {
                    try {
                        bat 'cd mle-template && docker-compose build'
                        }
                        
                    finally {
                    bat '''
                        cd mle-template
                        docker-compose up -d
                        '''
                        }
				    }
                }
            }
        // use for multi containers:
        //docker exec %containerId% cd app && coverage run src/unit_tests/test_preprocess.py && coverage run -a src/unit_tests/test_training.py && coverage report -m
        //use for single container (with auth):
        //docker run --name mle-template_web_1 cd app && coverage run src/unit_tests/test_preprocess.py && coverage run -a src/unit_tests/test_training.py && coverage report -m
        stage('Login'){
            steps{
                bat 'echo $DOCKERHUB_CREDS_PSW | docker login -u $DOCKERHUB_CREDS_USR --password-stdin'
            }
        }
        /*
        stage('Checkout docker logs and run coverage') {
            steps {
                dir("mle-template") {
                        bat '''
                            docker-compose up -d
                            for /f %%i in ('docker ps -qf "name=^mle-template_web_1"') do set containerId=%%i
                            echo %containerId%
                            IF "%containerId%" == "" (
                                echo "No container running"
                            )
                            ELSE (
                                docker logs --tail 1000 -f %containerId%
                                )
                        '''
                    }
            }
        }*/

        stage('Push'){
            steps{
                bat 'docker push altairzero/mle-template:latest'
            }
        }
        /*
        stage('Push to DockerHub') {
            steps {
                dir("hadoop-cluster-docker/config") {
                        sh './start-hadoop.sh'
                    }
				}
            }*/
	}

    post {
        always {
            bat 'docker logout'
        }
    }
}